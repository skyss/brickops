[project]
name = "brickops"
version = "0.3.1"
description = "Knowit's dataops library - simplifying building data pipelines in Databricks, for both testing and production use cases. The package enables a workflow where users write their code in notebooks, and then deploy them to a Databricks workspace without stepping on each other's toes."
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "pyyaml>=6.0.2",
    "requests>=2.32.3",
]

[dependency-groups]
dev = [
    "databricks-sdk>=0.46.0",
    "mypy>=1.14.0",
    "pre-commit>=4.1.0",
    "pyspark>=3.5.4",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "requests-mock>=1.12.1",
    "ruff>=0.8.4",
    "types-pyyaml>=6.0.12.20241221",
    "types-requests>=2.32.0.20241016",
]

[tool.pytest.ini_options]
testpaths = "tests"
pythonpath = "."


[tool.ruff.lint.per-file-ignores]
"./deploy/**.py" = [
    "INP001", # Not a package
    "F821",   # Do not care about undefined variables in notebooks as many are only available when running in databricks.
]

"./tools/**.py" = [
    "F821",    # Do not care about undefined variables in notebooks as many are only available when running in databricks.
    "ANN001",  # We are ok without type annotations in notebooks.
    "ANN201",  # Do not need return type annotations in notebooks.
    "ANN202",  # Do not need return type annotations in notebooks.
    "D103",    # Don't care about docstring in notebooks.
    "INP001",  # we do not care about implicit packages
    "D100",    # Don't care about docstring in notebooks.
    "FBT003",  # Don't care about booleans as positional arguments in notebooks
    "ERA001",  # False positive on MD cells in notebooks
    "B018",    # Notebooks can have last line as an "unused" object in order to display it
    "E501",    # Noteboks often have long lines
    "PLR2004", # Magic values are ok in notebooks
] # Most of the code will be in notebooks, and tooling support will vary. Impractical to enforce strict rules.

[tool.mypy]
disallow_untyped_defs = true
exclude = ["tools"]
